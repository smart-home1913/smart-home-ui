// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { CreateActionActionsPostData, CreateActionActionsPostResponse, GetActionsActionsGetData, GetActionsActionsGetResponse, PatchActionActionsPatchData, PatchActionActionsPatchResponse, GetActionActionsActionIdGetData, GetActionActionsActionIdGetResponse, DeleteActionActionsActionIdDeleteData, DeleteActionActionsActionIdDeleteResponse, RunActionActionsRunControllerIdActionIdGetData, RunActionActionsRunControllerIdActionIdGetResponse, GetSmartControllersSmartControllersGetResponse, CreateSmartControllerSmartControllersPostData, CreateSmartControllerSmartControllersPostResponse, PatchSmartControllerSmartControllersPatchData, PatchSmartControllerSmartControllersPatchResponse, GetSmartControllerSmartControllersSmartControllerIdGetData, GetSmartControllerSmartControllersSmartControllerIdGetResponse, CreateTaskTasksPostData, CreateTaskTasksPostResponse, GetTasksTasksGetResponse, PatchTaskTasksPatchData, PatchTaskTasksPatchResponse, DeleteTaskTasksDeleteData, DeleteTaskTasksDeleteResponse, GetSmartControllerTasksTasksSmartControllerIdGetData, GetSmartControllerTasksTasksSmartControllerIdGetResponse, GetTaskTasksTaskIdGetData, GetTaskTasksTaskIdGetResponse, GetAutomationsAutomationsGetResponse, CreateAutomationAutomationsPostData, CreateAutomationAutomationsPostResponse, ReadAutomationAutomationsAutomationIdGetData, ReadAutomationAutomationsAutomationIdGetResponse, UpdateAutomationAutomationsAutomationIdPutData, UpdateAutomationAutomationsAutomationIdPutResponse, DeleteAutomationAutomationsAutomationIdDeleteData, DeleteAutomationAutomationsAutomationIdDeleteResponse, CreateNodeAutomationsAutomationIdNodesPostData, CreateNodeAutomationsAutomationIdNodesPostResponse, ReadAutomationsNodesAutomationsAutomationIdNodesGetData, ReadAutomationsNodesAutomationsAutomationIdNodesGetResponse, ReadNodeAutomationsAutomationIdNodesNodeIdGetData, ReadNodeAutomationsAutomationIdNodesNodeIdGetResponse, UpdateNodeAutomationsAutomationIdNodesPutData, UpdateNodeAutomationsAutomationIdNodesPutResponse, DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteData, DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteResponse, CreateEdgeAutomationsAutomationIdEdgesPostData, CreateEdgeAutomationsAutomationIdEdgesPostResponse, ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetData, ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetResponse, UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutData, UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutResponse, DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteData, DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteResponse } from './types.gen';

export class DefaultService {
    /**
     * Create Action
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ActionResponse Successful Response
     * @throws ApiError
     */
    public static createActionActionsPost(data: CreateActionActionsPostData): CancelablePromise<CreateActionActionsPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/actions/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Actions
     * @param data The data for the request.
     * @param data.includeSensors
     * @param data.includeActions
     * @returns ActionResponse Successful Response
     * @throws ApiError
     */
    public static getActionsActionsGet(data: GetActionsActionsGetData = {}): CancelablePromise<GetActionsActionsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/actions/',
            query: {
                include_sensors: data.includeSensors,
                include_actions: data.includeActions
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Patch Action
     * @param data The data for the request.
     * @param data.requestBody
     * @returns ActionResponse Successful Response
     * @throws ApiError
     */
    public static patchActionActionsPatch(data: PatchActionActionsPatchData): CancelablePromise<PatchActionActionsPatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/actions/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Action
     * @param data The data for the request.
     * @param data.actionId
     * @returns ActionResponse Successful Response
     * @throws ApiError
     */
    public static getActionActionsActionIdGet(data: GetActionActionsActionIdGetData): CancelablePromise<GetActionActionsActionIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/actions/{action_id}',
            path: {
                action_id: data.actionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Action
     * @param data The data for the request.
     * @param data.actionId
     * @returns ActionResponse Successful Response
     * @throws ApiError
     */
    public static deleteActionActionsActionIdDelete(data: DeleteActionActionsActionIdDeleteData): CancelablePromise<DeleteActionActionsActionIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/actions/{action_id}',
            path: {
                action_id: data.actionId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Run Action
     * @param data The data for the request.
     * @param data.controllerId
     * @param data.actionId
     * @param data.minutesToRunOpposite
     * @returns number Successful Response
     * @throws ApiError
     */
    public static runActionActionsRunControllerIdActionIdGet(data: RunActionActionsRunControllerIdActionIdGetData): CancelablePromise<RunActionActionsRunControllerIdActionIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/actions/run/{controller_id}/{action_id}',
            path: {
                controller_id: data.controllerId,
                action_id: data.actionId
            },
            query: {
                minutes_to_run_opposite: data.minutesToRunOpposite
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Smart Controllers
     * @returns SmartControllerResponse Successful Response
     * @throws ApiError
     */
    public static getSmartControllersSmartControllersGet(): CancelablePromise<GetSmartControllersSmartControllersGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/smartControllers/'
        });
    }
    
    /**
     * Create Smart Controller
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static createSmartControllerSmartControllersPost(data: CreateSmartControllerSmartControllersPostData): CancelablePromise<CreateSmartControllerSmartControllersPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/smartControllers/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Patch Smart Controller
     * @param data The data for the request.
     * @param data.requestBody
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static patchSmartControllerSmartControllersPatch(data: PatchSmartControllerSmartControllersPatchData): CancelablePromise<PatchSmartControllerSmartControllersPatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/smartControllers/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Smart Controller
     * @param data The data for the request.
     * @param data.smartControllerId
     * @returns unknown Successful Response
     * @throws ApiError
     */
    public static getSmartControllerSmartControllersSmartControllerIdGet(data: GetSmartControllerSmartControllersSmartControllerIdGetData): CancelablePromise<GetSmartControllerSmartControllersSmartControllerIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/smartControllers/{smart_controller_id}',
            path: {
                smart_controller_id: data.smartControllerId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Task
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static createTaskTasksPost(data: CreateTaskTasksPostData): CancelablePromise<CreateTaskTasksPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/tasks/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Tasks
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static getTasksTasksGet(): CancelablePromise<GetTasksTasksGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tasks/'
        });
    }
    
    /**
     * Patch Task
     * @param data The data for the request.
     * @param data.requestBody
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static patchTaskTasksPatch(data: PatchTaskTasksPatchData): CancelablePromise<PatchTaskTasksPatchResponse> {
        return __request(OpenAPI, {
            method: 'PATCH',
            url: '/tasks/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Task
     * @param data The data for the request.
     * @param data.taskId
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static deleteTaskTasksDelete(data: DeleteTaskTasksDeleteData): CancelablePromise<DeleteTaskTasksDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/tasks/',
            query: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Smart Controller Tasks
     * @param data The data for the request.
     * @param data.smartControllerId
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static getSmartControllerTasksTasksSmartControllerIdGet(data: GetSmartControllerTasksTasksSmartControllerIdGetData): CancelablePromise<GetSmartControllerTasksTasksSmartControllerIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tasks/{smart_controller_id}',
            path: {
                smart_controller_id: data.smartControllerId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Task
     * @param data The data for the request.
     * @param data.taskId
     * @returns TaskResponse Successful Response
     * @throws ApiError
     */
    public static getTaskTasksTaskIdGet(data: GetTaskTasksTaskIdGetData): CancelablePromise<GetTaskTasksTaskIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/tasks/{task_id}',
            path: {
                task_id: data.taskId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Get Automations
     * @returns AutomationResponse Successful Response
     * @throws ApiError
     */
    public static getAutomationsAutomationsGet(): CancelablePromise<GetAutomationsAutomationsGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/'
        });
    }
    
    /**
     * Create Automation
     * @param data The data for the request.
     * @param data.requestBody
     * @returns AutomationResponse Successful Response
     * @throws ApiError
     */
    public static createAutomationAutomationsPost(data: CreateAutomationAutomationsPostData): CancelablePromise<CreateAutomationAutomationsPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/',
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Automation
     * @param data The data for the request.
     * @param data.automationId
     * @returns AutomationResponse Successful Response
     * @throws ApiError
     */
    public static readAutomationAutomationsAutomationIdGet(data: ReadAutomationAutomationsAutomationIdGetData): CancelablePromise<ReadAutomationAutomationsAutomationIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/{automation_id}',
            path: {
                automation_id: data.automationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Automation
     * @param data The data for the request.
     * @param data.automationId
     * @param data.requestBody
     * @returns AutomationResponse Successful Response
     * @throws ApiError
     */
    public static updateAutomationAutomationsAutomationIdPut(data: UpdateAutomationAutomationsAutomationIdPutData): CancelablePromise<UpdateAutomationAutomationsAutomationIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/automations/{automation_id}',
            path: {
                automation_id: data.automationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Automation
     * @param data The data for the request.
     * @param data.automationId
     * @returns AutomationResponse Successful Response
     * @throws ApiError
     */
    public static deleteAutomationAutomationsAutomationIdDelete(data: DeleteAutomationAutomationsAutomationIdDeleteData): CancelablePromise<DeleteAutomationAutomationsAutomationIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/automations/{automation_id}',
            path: {
                automation_id: data.automationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Node
     * @param data The data for the request.
     * @param data.automationId
     * @param data.requestBody
     * @returns AutomationNodeResponse Successful Response
     * @throws ApiError
     */
    public static createNodeAutomationsAutomationIdNodesPost(data: CreateNodeAutomationsAutomationIdNodesPostData): CancelablePromise<CreateNodeAutomationsAutomationIdNodesPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/{automation_id}/nodes/',
            path: {
                automation_id: data.automationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Automations Nodes
     * @param data The data for the request.
     * @param data.automationId
     * @returns AutomationNodeResponse Successful Response
     * @throws ApiError
     */
    public static readAutomationsNodesAutomationsAutomationIdNodesGet(data: ReadAutomationsNodesAutomationsAutomationIdNodesGetData): CancelablePromise<ReadAutomationsNodesAutomationsAutomationIdNodesGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/{automation_id}/nodes/',
            path: {
                automation_id: data.automationId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Node
     * @param data The data for the request.
     * @param data.automationId
     * @param data.nodeId
     * @returns AutomationNodeResponse Successful Response
     * @throws ApiError
     */
    public static readNodeAutomationsAutomationIdNodesNodeIdGet(data: ReadNodeAutomationsAutomationIdNodesNodeIdGetData): CancelablePromise<ReadNodeAutomationsAutomationIdNodesNodeIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/{automation_id}/nodes/{node_id}',
            path: {
                automation_id: data.automationId,
                node_id: data.nodeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Node
     * @param data The data for the request.
     * @param data.automationId
     * @param data.requestBody
     * @returns AutomationNodeResponse Successful Response
     * @throws ApiError
     */
    public static updateNodeAutomationsAutomationIdNodesPut(data: UpdateNodeAutomationsAutomationIdNodesPutData): CancelablePromise<UpdateNodeAutomationsAutomationIdNodesPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/automations/{automation_id}/nodes',
            path: {
                automation_id: data.automationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Node
     * @param data The data for the request.
     * @param data.automationId
     * @param data.uniqueKey
     * @returns AutomationNodeResponse Successful Response
     * @throws ApiError
     */
    public static deleteNodeAutomationsAutomationIdNodesUniqueKeyDelete(data: DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteData): CancelablePromise<DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/automations/{automation_id}/nodes/{unique_key}',
            path: {
                automation_id: data.automationId,
                unique_key: data.uniqueKey
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Create Edge
     * @param data The data for the request.
     * @param data.automationId
     * @param data.requestBody
     * @returns AutomationEdgeResponse Successful Response
     * @throws ApiError
     */
    public static createEdgeAutomationsAutomationIdEdgesPost(data: CreateEdgeAutomationsAutomationIdEdgesPostData): CancelablePromise<CreateEdgeAutomationsAutomationIdEdgesPostResponse> {
        return __request(OpenAPI, {
            method: 'POST',
            url: '/automations/{automation_id}/edges/',
            path: {
                automation_id: data.automationId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Read Edge
     * @param data The data for the request.
     * @param data.automationId
     * @param data.edgeId
     * @returns AutomationEdgeResponse Successful Response
     * @throws ApiError
     */
    public static readEdgeAutomationsAutomationIdEdgesEdgeIdGet(data: ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetData): CancelablePromise<ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetResponse> {
        return __request(OpenAPI, {
            method: 'GET',
            url: '/automations/{automation_id}/edges/{edge_id}',
            path: {
                automation_id: data.automationId,
                edge_id: data.edgeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Update Edge
     * @param data The data for the request.
     * @param data.automationId
     * @param data.edgeId
     * @param data.requestBody
     * @returns AutomationEdgeResponse Successful Response
     * @throws ApiError
     */
    public static updateEdgeAutomationsAutomationIdEdgesEdgeIdPut(data: UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutData): CancelablePromise<UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutResponse> {
        return __request(OpenAPI, {
            method: 'PUT',
            url: '/automations/{automation_id}/edges/{edge_id}',
            path: {
                automation_id: data.automationId,
                edge_id: data.edgeId
            },
            body: data.requestBody,
            mediaType: 'application/json',
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
    /**
     * Delete Edge
     * @param data The data for the request.
     * @param data.automationId
     * @param data.edgeId
     * @returns AutomationEdgeResponse Successful Response
     * @throws ApiError
     */
    public static deleteEdgeAutomationsAutomationIdEdgesEdgeIdDelete(data: DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteData): CancelablePromise<DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteResponse> {
        return __request(OpenAPI, {
            method: 'DELETE',
            url: '/automations/{automation_id}/edges/{edge_id}',
            path: {
                automation_id: data.automationId,
                edge_id: data.edgeId
            },
            errors: {
                422: 'Validation Error'
            }
        });
    }
    
}