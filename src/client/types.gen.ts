// This file is auto-generated by @hey-api/openapi-ts

export type ActionRequest = {
    name: string;
    path: string;
    opposite_action_id?: string | null;
    description: string;
    is_sensor?: boolean;
};

export type ActionResponse = {
    id: string;
    name: string;
    path: string;
    opposite_action_id: string;
    description: string;
    is_sensor?: boolean;
};

export type ActionUpdateRequest = {
    id: string;
    name?: string;
    path?: string;
    opposite_action_id?: string;
    description?: string;
    is_sensor?: boolean;
};

export type AutomationEdgeConditionRequest = {
    condition_type: ConditionType;
    value_type: ReturnValueType;
    operator: Operator;
    value_number?: number | null;
    value_boolean?: boolean | null;
    is_loop: boolean;
};

export type AutomationEdgeRequest = {
    source: AutomationNodeResponse;
    target: AutomationNodeResponse;
    condition: AutomationEdgeConditionRequest;
};

export type AutomationEdgeResponse = {
    id: string;
    source: AutomationNodeResponse;
    target: AutomationNodeResponse;
    condition: AutomationEdgeConditionRequest;
};

export type AutomationEdgeUpdateRequest = {
    id: string;
    source: AutomationNodeResponse;
    target: AutomationNodeResponse;
    condition: AutomationEdgeConditionRequest;
};

export type AutomationNodeRequest = {
    smart_controller_id: string;
    action_id: string;
    location: Location;
};

export type AutomationNodeResponse = {
    id: string;
    unique_key: string;
    smart_controller_id: string;
    action_id: string;
    location: Location;
};

export type AutomationNodeUpdateRequest = {
    smart_controller_id: string;
    action_id: string;
    location: Location;
};

export type AutomationRequest = {
    name: string;
};

export type AutomationResponse = {
    id: string;
    name: string;
    inserted_at: string;
    nodes: Array<AutomationNodeResponse>;
    edges: Array<AutomationEdgeResponse>;
    is_active: boolean;
    viewport?: GraphViewport;
};

export type AutomationUpdateRequest = {
    name?: string;
    is_active: boolean;
    viewport: GraphViewport;
};

export type ConditionType = 'by_value' | 'by_trigger';

export type GraphViewport = {
    x: number;
    y: number;
    zoom: number;
};

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type Location = {
    x: number;
    y: number;
};

export type Operator = '>' | '<' | '<=' | '>=' | '==' | '!=';

export type ReturnValueType = 'boolean' | 'number';

export type SmartControllerRequest = {
    name: string;
    address: string;
    actions: Array<(string)>;
};

export type SmartControllerResponse = {
    id: string;
    name: string;
    address: string;
    actions: Array<ActionResponse>;
};

export type SmartControllerUpdateRequest = {
    id: string;
    name?: string;
    address?: string;
    actions?: Array<(string)> | null;
};

export type TaskRequest = {
    type: TaskType;
    action_id: string;
    smart_controller_id: string;
    minute: number;
    hour: number;
    week_day: number;
    month_day: number;
};

export type TaskResponse = {
    id: string;
    type: TaskType;
    action: ActionResponse;
    smart_controller: SmartControllerResponse;
    minute: number;
    hour: number;
    week_day: number;
    month_day: number;
};

export type TaskType = 'daily' | 'weekly' | 'monthly';

export type TaskUpdateRequest = {
    id: string;
    type?: TaskType | null;
    action?: string | null;
    minute?: number | null;
    hour?: number | null;
    week_day?: number | null;
    month_day?: number | null;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CreateActionActionsPostData = {
    requestBody: ActionRequest;
};

export type CreateActionActionsPostResponse = ActionResponse;

export type GetActionsActionsGetData = {
    includeActions?: boolean;
    includeSensors?: boolean;
};

export type GetActionsActionsGetResponse = Array<ActionResponse>;

export type PatchActionActionsPatchData = {
    requestBody: ActionUpdateRequest;
};

export type PatchActionActionsPatchResponse = ActionResponse;

export type GetActionActionsActionIdGetData = {
    actionId: string;
};

export type GetActionActionsActionIdGetResponse = ActionResponse;

export type DeleteActionActionsActionIdDeleteData = {
    actionId: string;
};

export type DeleteActionActionsActionIdDeleteResponse = ActionResponse;

export type RunActionActionsRunControllerIdActionIdGetData = {
    actionId: string;
    controllerId: string;
    minutesToRunOpposite?: number | null;
};

export type RunActionActionsRunControllerIdActionIdGetResponse = number;

export type GetSmartControllersSmartControllersGetResponse = Array<SmartControllerResponse>;

export type CreateSmartControllerSmartControllersPostData = {
    requestBody: SmartControllerRequest;
};

export type CreateSmartControllerSmartControllersPostResponse = unknown;

export type PatchSmartControllerSmartControllersPatchData = {
    requestBody: SmartControllerUpdateRequest;
};

export type PatchSmartControllerSmartControllersPatchResponse = unknown;

export type GetSmartControllerSmartControllersSmartControllerIdGetData = {
    smartControllerId: string;
};

export type GetSmartControllerSmartControllersSmartControllerIdGetResponse = unknown;

export type CreateTaskTasksPostData = {
    requestBody: TaskRequest;
};

export type CreateTaskTasksPostResponse = TaskResponse;

export type GetTasksTasksGetResponse = Array<TaskResponse>;

export type PatchTaskTasksPatchData = {
    requestBody: TaskUpdateRequest;
};

export type PatchTaskTasksPatchResponse = TaskResponse;

export type DeleteTaskTasksDeleteData = {
    taskId: string;
};

export type DeleteTaskTasksDeleteResponse = TaskResponse;

export type GetSmartControllerTasksTasksSmartControllerIdGetData = {
    smartControllerId: string;
};

export type GetSmartControllerTasksTasksSmartControllerIdGetResponse = Array<TaskResponse>;

export type GetTaskTasksTaskIdGetData = {
    taskId: string;
};

export type GetTaskTasksTaskIdGetResponse = TaskResponse;

export type GetAutomationsAutomationsGetResponse = Array<AutomationResponse>;

export type CreateAutomationAutomationsPostData = {
    requestBody: AutomationRequest;
};

export type CreateAutomationAutomationsPostResponse = AutomationResponse;

export type ReadAutomationAutomationsAutomationIdGetData = {
    automationId: string;
};

export type ReadAutomationAutomationsAutomationIdGetResponse = AutomationResponse;

export type UpdateAutomationAutomationsAutomationIdPutData = {
    automationId: string;
    requestBody: AutomationUpdateRequest;
};

export type UpdateAutomationAutomationsAutomationIdPutResponse = AutomationResponse;

export type DeleteAutomationAutomationsAutomationIdDeleteData = {
    automationId: string;
};

export type DeleteAutomationAutomationsAutomationIdDeleteResponse = AutomationResponse;

export type CreateNodeAutomationsAutomationIdNodesPostData = {
    automationId: string;
    requestBody: AutomationNodeRequest;
};

export type CreateNodeAutomationsAutomationIdNodesPostResponse = AutomationNodeResponse;

export type ReadAutomationsNodesAutomationsAutomationIdNodesGetData = {
    automationId: string;
};

export type ReadAutomationsNodesAutomationsAutomationIdNodesGetResponse = Array<AutomationNodeResponse>;

export type ReadNodeAutomationsAutomationIdNodesNodeIdGetData = {
    automationId: string;
    nodeId: string;
};

export type ReadNodeAutomationsAutomationIdNodesNodeIdGetResponse = AutomationNodeResponse;

export type UpdateNodeAutomationsAutomationIdNodesPutData = {
    automationId: string;
    requestBody: AutomationNodeUpdateRequest;
};

export type UpdateNodeAutomationsAutomationIdNodesPutResponse = AutomationNodeResponse;

export type DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteData = {
    automationId: string;
    uniqueKey: string;
};

export type DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteResponse = AutomationNodeResponse;

export type CreateEdgeAutomationsAutomationIdEdgesPostData = {
    automationId: string;
    requestBody: AutomationEdgeRequest;
};

export type CreateEdgeAutomationsAutomationIdEdgesPostResponse = AutomationEdgeResponse;

export type ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetData = {
    automationId: string;
    edgeId: string;
};

export type ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetResponse = AutomationEdgeResponse;

export type UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutData = {
    automationId: string;
    edgeId: string;
    requestBody: AutomationEdgeUpdateRequest;
};

export type UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutResponse = AutomationEdgeResponse;

export type DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteData = {
    automationId: string;
    edgeId: string;
};

export type DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteResponse = AutomationEdgeResponse;

export type $OpenApiTs = {
    '/actions/': {
        post: {
            req: CreateActionActionsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: ActionResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: GetActionsActionsGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<ActionResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchActionActionsPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: ActionResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/actions/{action_id}': {
        get: {
            req: GetActionActionsActionIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: ActionResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteActionActionsActionIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: ActionResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/actions/run/{controller_id}/{action_id}': {
        get: {
            req: RunActionActionsRunControllerIdActionIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: number;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/smartControllers/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<SmartControllerResponse>;
            };
        };
        post: {
            req: CreateSmartControllerSmartControllersPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        patch: {
            req: PatchSmartControllerSmartControllersPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/smartControllers/{smart_controller_id}': {
        get: {
            req: GetSmartControllerSmartControllersSmartControllerIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: unknown;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/tasks/': {
        post: {
            req: CreateTaskTasksPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<TaskResponse>;
            };
        };
        patch: {
            req: PatchTaskTasksPatchData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteTaskTasksDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/tasks/{smart_controller_id}': {
        get: {
            req: GetSmartControllerTasksTasksSmartControllerIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<TaskResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/tasks/{task_id}': {
        get: {
            req: GetTaskTasksTaskIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: TaskResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/': {
        get: {
            res: {
                /**
                 * Successful Response
                 */
                200: Array<AutomationResponse>;
            };
        };
        post: {
            req: CreateAutomationAutomationsPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}': {
        get: {
            req: ReadAutomationAutomationsAutomationIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateAutomationAutomationsAutomationIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteAutomationAutomationsAutomationIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/nodes/': {
        post: {
            req: CreateNodeAutomationsAutomationIdNodesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationNodeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        get: {
            req: ReadAutomationsNodesAutomationsAutomationIdNodesGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: Array<AutomationNodeResponse>;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/nodes/{node_id}': {
        get: {
            req: ReadNodeAutomationsAutomationIdNodesNodeIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationNodeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/nodes': {
        put: {
            req: UpdateNodeAutomationsAutomationIdNodesPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationNodeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/nodes/{unique_key}': {
        delete: {
            req: DeleteNodeAutomationsAutomationIdNodesUniqueKeyDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationNodeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/edges/': {
        post: {
            req: CreateEdgeAutomationsAutomationIdEdgesPostData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationEdgeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
    '/automations/{automation_id}/edges/{edge_id}': {
        get: {
            req: ReadEdgeAutomationsAutomationIdEdgesEdgeIdGetData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationEdgeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        put: {
            req: UpdateEdgeAutomationsAutomationIdEdgesEdgeIdPutData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationEdgeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
        delete: {
            req: DeleteEdgeAutomationsAutomationIdEdgesEdgeIdDeleteData;
            res: {
                /**
                 * Successful Response
                 */
                200: AutomationEdgeResponse;
                /**
                 * Validation Error
                 */
                422: HTTPValidationError;
            };
        };
    };
};